---
- name: Check if account exists in the DB
  vars:
    _data:
      name:
        S: "{{ account_name }}"
  command: >-
    aws --profile {{ aws_master_profile }} --region {{ dynamodb_region }}
    dynamodb get-item
    --table-name {{ dynamodb_table }}
    --key '{{ _data | to_json }}'
  register: _getaccount

- debug:
    var: _getaccount

- name: Create account in DB if it doesn't exist
  vars:
    _data:
      name:
        S: "{{ account_name }}"
  command: >-
    aws --profile {{ aws_master_profile }} --region {{ dynamodb_region }}
    dynamodb put-item
    --table-name {{ dynamodb_table }}
    --item '{{ _data | to_json }}'
  register: _putaccount
  when: _getaccount.stdout == ''

- debug:
    var: _putaccount

- when: operation == 'CREATE'
  block:
    - debug:
        msg: noop

- when: operation == 'RESET'
  block:
    - name: Update account information
      vars:
        _data:
          available:
            Value:
              BOOL: true
            Action: PUT
          account_id:
            Value:
              S: "{{ account_id }}"
            Action: PUT
          aws_access_key_id:
            Value:
              S: "{{ account_user_access_key }}"
            Action: PUT
          aws_secret_access_key:
            Value:
              S: "{{ account_user_secret_access_key_encrypted }}"
            Action: PUT
          hosted_zone_id:
            Value:
              S: "{{ account_hosted_zone_id }}"
            Action: PUT
          zone:
            Value:
              S: "{{ account_name }}{{subdomain_base}}"
            Action: PUT
      command: >-
        aws --profile {{ aws_master_profile }}
        --region {{ dynamodb_region }}
        dynamodb update-item
        --table-name {{ dynamodb_table }}
        --key '{"name": {"S": "{{ account_name }}"}}'
        --attribute-updates '{{ _data | to_json }}'
      register: _putaccount

# - name: Get the list of available accounts
#   vars:
#     _data:
#       :a:
#         BOOL: true
#   command: >-
#     aws --profile {{ aws_master_profile }}
#     --region {{ dynamodb_region }}
#     dynamodb scan
#     --table-name {{ dynamodb_table }}
#     --filter-expression 'available = :a'
#     --expression-attribute-values '{{ _data | to_json }}'
#     --max-item 1
#   tags: testpool

#   register: _availableaccounts

# - debug:
#     var: _availableaccounts
#   tags: testpool

# - set_fact:
#     account_user_secret_access_key_encrypted: "{{ _availableaccounts.stdout | from_json | json_query('Items[0].aws_secret_access_key.S') }}"
#   tags: testpool

# - debug:
#     var: account_user_secret_access_key_encrypted
#   tags: testpool

# - name: Decrypt secret_access_key using ansible-vault
#   command: >-
#     ansible-vault decrypt --vault-password-file "{{ vault_file }}"
#   args:
#     stdin: "{{ account_user_secret_access_key_encrypted }}"
#   register: decrypted
#   tags: testpool
# - debug:
#     var: decrypted
#   tags: testpool
